{
	"Class file": {
		"scope": "php",
		"prefix": "<?php",
		"body": [
			"<?php declare(strict_types=1);",
			"",
			"namespace Lkrms\\PrettyPHP${TM_DIRECTORY/^.*\\\\/src|^.*\\\\/(tests\\\\/unit)|\\\\/([A-Z][a-zA-Z0-9]*)/${1:+\\\\Tests}${2:+\\\\}$2/g};",
			"",
			"/**",
			" * ${1:Summary}",
			" *",
			" */",
			"class ${TM_FILENAME_BASE/[^a-zA-Z0-9]+//g} {",
			"    $0",
			"}"
		]
	},
	"Rule test (simple)": {
		"scope": "php",
		"prefix": "<?php",
		"body": [
			"<?php declare(strict_types=1);",
			"",
			"namespace Lkrms\\PrettyPHP${TM_DIRECTORY/^.*\\\\/src|^.*\\\\/(tests\\\\/unit)|\\\\/([A-Z][a-zA-Z0-9]*)/${1:+\\\\Tests}${2:+\\\\}$2/g};",
			"",
			"final class ${TM_FILENAME_BASE/[^a-zA-Z0-9]+//g} extends \\Lkrms\\PrettyPHP\\Tests\\TestCase",
			"{",
			"    /**",
			"     * @dataProvider outputProvider",
			"     */",
			"    public function testOutput(string \\$expected, string \\$code): void",
			"    {",
			"        \\$this->assertCodeFormatIs(\\$expected, \\$code);",
			"    }",
			"",
			"    /**",
			"     * @return array<string[]>",
			"     */",
			"    public static function outputProvider(): array",
			"    {",
			"        return [",
			"            [",
			"                <<<'PHP'",
			"PHP,",
			"                <<<'PHP'",
			"$0",
			"PHP,",
			"            ],",
			"        ];",
			"    }",
			"}"
		]
	},
	"Rule test (flexible)": {
		"scope": "php",
		"prefix": "<?php",
		"body": [
			"<?php declare(strict_types=1);",
			"",
			"namespace Lkrms\\PrettyPHP${TM_DIRECTORY/^.*\\\\/src|^.*\\\\/(tests\\\\/unit)|\\\\/([A-Z][a-zA-Z0-9]*)/${1:+\\\\Tests}${2:+\\\\}$2/g};",
			"",
			"use Lkrms\\PrettyPHP\\Formatter;",
			"use Lkrms\\PrettyPHP\\FormatterBuilder as FormatterB;",
			"",
			"final class ${TM_FILENAME_BASE/[^a-zA-Z0-9]+//g} extends \\Lkrms\\PrettyPHP\\Tests\\TestCase",
			"{",
			"    /**",
			"     * @dataProvider outputProvider",
			"     *",
			"     * @param Formatter|FormatterB \\$formatter",
			"     */",
			"    public function testOutput(string \\$expected, string \\$code, \\$formatter): void",
			"    {",
			"        \\$this->assertFormatterOutputIs(\\$expected, \\$code, \\$formatter);",
			"    }",
			"",
			"    /**",
			"     * @return array<array{string,string,Formatter|FormatterB}>",
			"     */",
			"    public static function outputProvider(): array",
			"    {",
			"        \\$formatterB = Formatter::build();",
			"        \\$formatter = \\$formatterB->go();",
			"",
			"        return [",
			"            [",
			"                <<<'PHP'",
			"PHP,",
			"                <<<'PHP'",
			"$0",
			"PHP,",
			"                \\$formatter,",
			"            ],",
			"        ];",
			"    }",
			"}"
		]
	},
	"Return priority": {
		"scope": "php",
		"prefix": "switch",
		"body": [
			"switch (\\$method) {",
			"    case self::PROCESS_TOKEN:",
			"    case self::PROCESS_TOKENS:",
			"    case self::PROCESS_LIST:",
			"    case self::PROCESS_BLOCK:",
			"        return null;",
			"",
			"    case self::BEFORE_RENDER:",
			"        return null;",
			"",
			"    default:",
			"        return null;",
			"}",
		]
	}
}
