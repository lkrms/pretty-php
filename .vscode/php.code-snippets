{
	"Class file": {
		"scope": "php",
		"prefix": "<?php",
		"body": [
			"<?php declare(strict_types=1);",
			"",
			"namespace ${TM_DIRECTORY/^.*\\\\/(src|(tests\\\\/(?:unit|integration|fixtures)))|\\\\/([a-zA-Z0-9]+)/${1:+Lkrms\\\\PrettyPHP}${2:+\\\\Tests}${3:+\\\\}$3/g};",
			"",
			"${RELATIVE_FILEPATH/(?:.*(?:(\\\\/Contract\\\\/.*|Interface\\.php$)|(\\\\/Concern\\\\/.*|Trait\\.php$))|(^(?:.(?!\\\\/(?:Contract|Concern)\\\\/|(?:Interface|Trait)\\.php$))*$))/${1:+interface}${2:+trait}${3:+class}/} ${TM_FILENAME_BASE/[^a-zA-Z0-9]+//g} {",
			"    $0",
			"}",
			""
		]
	},
	"Rule test (simple)": {
		"scope": "php",
		"prefix": "<?php",
		"body": [
			"<?php declare(strict_types=1);",
			"",
			"namespace ${TM_DIRECTORY/^.*\\\\/(src|(tests\\\\/(?:unit|integration|fixtures)))|\\\\/([a-zA-Z0-9]+)/${1:+Lkrms\\\\PrettyPHP}${2:+\\\\Tests}${3:+\\\\}$3/g};",
			"",
			"use Lkrms\\PrettyPHP\\Tests\\TestCase;",
			"",
			"final class ${TM_FILENAME_BASE/[^a-zA-Z0-9]+//g} extends TestCase",
			"{",
			"    /**",
			"     * @dataProvider outputProvider",
			"     */",
			"    public function testOutput(string \\$expected, string \\$code): void",
			"    {",
			"        \\$this->assertCodeFormatIs(\\$expected, \\$code);",
			"    }",
			"",
			"    /**",
			"     * @return array<array{string,string}>",
			"     */",
			"    public static function outputProvider(): array",
			"    {",
			"        return [",
			"            [",
			"                <<<'PHP'",
			"PHP,",
			"                <<<'PHP'",
			"$0",
			"PHP,",
			"            ],",
			"        ];",
			"    }",
			"}"
		]
	},
	"Rule test (flexible)": {
		"scope": "php",
		"prefix": "<?php",
		"body": [
			"<?php declare(strict_types=1);",
			"",
			"namespace ${TM_DIRECTORY/^.*\\\\/(src|(tests\\\\/(?:unit|integration|fixtures)))|\\\\/([a-zA-Z0-9]+)/${1:+Lkrms\\\\PrettyPHP}${2:+\\\\Tests}${3:+\\\\}$3/g};",
			"",
			"use Lkrms\\PrettyPHP\\Tests\\TestCase;",
			"use Lkrms\\PrettyPHP\\Formatter;",
			"use Lkrms\\PrettyPHP\\FormatterBuilder as FormatterB;",
			"",
			"final class ${TM_FILENAME_BASE/[^a-zA-Z0-9]+//g} extends TestCase",
			"{",
			"    /**",
			"     * @dataProvider outputProvider",
			"     *",
			"     * @param Formatter|FormatterB \\$formatter",
			"     */",
			"    public function testOutput(string \\$expected, string \\$code, \\$formatter): void",
			"    {",
			"        \\$this->assertFormatterOutputIs(\\$expected, \\$code, \\$formatter);",
			"    }",
			"",
			"    /**",
			"     * @return array<array{string,string,Formatter|FormatterB}>",
			"     */",
			"    public static function outputProvider(): array",
			"    {",
			"        \\$formatterB = Formatter::build();",
			"        \\$formatter = \\$formatterB->build();",
			"",
			"        return [",
			"            [",
			"                <<<'PHP'",
			"PHP,",
			"                <<<'PHP'",
			"$0",
			"PHP,",
			"                \\$formatter,",
			"            ],",
			"        ];",
			"    }",
			"}"
		]
	},
	"Return priority": {
		"scope": "php",
		"prefix": "return",
		"body": [
			"return [",
			"    self::PROCESS_TOKENS => null,",
			"    self::PROCESS_STATEMENTS => null,",
			"    self::PROCESS_DECLARATIONS => null,",
			"    self::PROCESS_LIST => null,",
			"    self::PROCESS_BLOCK => null,",
			"    self::CALLBACK => null,",
			"    self::BEFORE_RENDER => null,",
			"][\\$method] ?? null;",
		]
	},
	"Namespace": {
		"scope": "php",
		"prefix": "namespace",
		"body": [
			"namespace ${TM_DIRECTORY/^.*\\\\/(src|(tests\\\\/(?:unit|integration|fixtures)))|\\\\/([a-zA-Z0-9]+)/${1:+Lkrms\\\\PrettyPHP}${2:+\\\\Tests}${3:+\\\\}$3/g};"
		]
	}
}