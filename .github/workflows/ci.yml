name: CI

on:
  pull_request:
    paths:
      - "bin/**"
      - "src/**"
      - "tests/**"
      - "scripts/**"
      - bootstrap.php

  workflow_call:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  format:
    name: Check formatting
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup PHP and Composer
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          coverage: none

      - name: Get Composer cache directory
        id: get-composer-cache
        shell: bash
        run: printf 'cache_dir=%s\n' "$(composer config cache-files-dir)" >>"$GITHUB_OUTPUT"

      - name: Cache PHP dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.get-composer-cache.outputs.cache_dir }}
          key: composer-cache-${{ runner.os }}-${{ hashFiles('**/composer.json', '**/composer.lock') }}
          restore-keys: composer-cache-${{ runner.os }}-

      - name: Install dependencies
        run: composer install --no-interaction --no-progress --no-dev

      - name: Run pretty-php
        run: bin/pretty-php --diff

  phpstan:
    name: PHPStan
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php-version:
          - "8.2"
          - "7.4"

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup PHP and Composer
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          coverage: none

      - name: Get Composer cache directory
        id: get-composer-cache
        shell: bash
        run: printf 'cache_dir=%s\n' "$(composer config cache-files-dir)" >>"$GITHUB_OUTPUT"

      - name: Cache PHP dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.get-composer-cache.outputs.cache_dir }}
          key: composer-cache-${{ runner.os }}-${{ hashFiles('**/composer.json', '**/composer.lock') }}
          restore-keys: composer-cache-${{ runner.os }}-

      - name: Install dependencies
        run: composer install --no-interaction --no-progress

      - name: Run PHPStan
        run: vendor/bin/phpstan

  unit-tests:
    name: PHPUnit tests

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        php-version:
          - "8.2"
        include:
          - os: ubuntu-latest
            php-version: "8.3"
          - os: ubuntu-latest
            php-version: "8.1"
          - os: ubuntu-latest
            php-version: "8.0"
          - os: ubuntu-latest
            php-version: "7.4"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup PHP and Composer
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: none, dom, json, mbstring, openssl, tokenizer, xml, xmlwriter
          coverage: pcov

      - name: Get Composer cache directory
        id: get-composer-cache
        shell: bash
        run: printf 'cache_dir=%s\n' "$(composer config cache-files-dir)" >>"$GITHUB_OUTPUT"

      - name: Cache PHP dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.get-composer-cache.outputs.cache_dir }}
          key: composer-cache-${{ runner.os }}-${{ hashFiles('**/composer.json', '**/composer.lock') }}
          restore-keys: composer-cache-${{ runner.os }}-

      - name: Install dependencies
        run: composer install --no-interaction --no-progress

      - name: Run PHPUnit tests and generate code coverage report
        run: php -dshort_open_tag=On vendor/bin/phpunit --no-coverage --coverage-clover=coverage.xml

      - name: Upload code coverage report to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  build:
    name: Build phar and man page
    needs:
      - phpstan
      - unit-tests
    runs-on: ubuntu-latest
    outputs:
      artifact_name: ${{ steps.run-build-script.outputs.artifact_name }}
      artifact_path: ${{ steps.run-build-script.outputs.artifact_path }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup PHP and Composer
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          coverage: none

      - name: Get Composer cache directory
        id: get-composer-cache
        shell: bash
        run: printf 'cache_dir=%s\n' "$(composer config cache-files-dir)" >>"$GITHUB_OUTPUT"

      - name: Cache PHP dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.get-composer-cache.outputs.cache_dir }}
          key: composer-cache-${{ runner.os }}-${{ hashFiles('**/composer.json', '**/composer.lock') }}
          restore-keys: composer-cache-${{ runner.os }}-

      - name: Setup Pandoc
        run: |
          sudo apt-get update
          sudo apt-get install pandoc

      - name: Install dependencies
        run: composer install --no-interaction --no-progress

      # Run the phar and man builds separately and together to test each code
      # path in the build script
      - name: Run build script
        id: run-build-script
        run: |
          scripts/build.sh
          scripts/build.sh man
          scripts/build.sh man worktree
          cd build/dist
          { printf 'artifact_name=%s-snapshot-phar\n' "${GITHUB_REPOSITORY##*/}" &&
            printf 'artifact_path=%s\n' *.phar | head -n1 &&
            printf 'man_path=%s\n' *.[0-9] | head -n1; } | tee -a "$GITHUB_OUTPUT" >>"$GITHUB_ENV"

      - name: Upload phar artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.artifact_name }}
          path: build/dist/${{ env.artifact_path }}

      - name: Upload man page artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.man_path }}
          path: build/dist/${{ env.man_path }}

  test-phar:
    name: Test phar
    needs:
      - build

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        php-version:
          - "8.2"
        include:
          - os: ubuntu-latest
            php-version: "8.3"
          - os: ubuntu-latest
            php-version: "8.1"
          - os: ubuntu-latest
            php-version: "8.0"
          - os: ubuntu-latest
            php-version: "7.4"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: none, json, mbstring, tokenizer
          coverage: none

      - name: Download phar artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.artifact_name }}

      - name: Run pretty-php
        env:
          artifact_path: ${{ needs.build.outputs.artifact_path }}
        run: php "$artifact_path" --verbose
        shell: bash

  integration-tests:
    name: Integration tests
    needs:
      - build
      - test-phar
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        repository:
          - laravel/framework
        args:
          - --include-if-php --preset laravel src tests bin
        include:
          - repository: drupal/drupal
            args: --exclude '/\/(\.git|\.hg|\.svn|_?build|dist|vendor|core\/lib\/Drupal\/Component\/Transliteration\/data)\/$/' --include-if-php=/./ --preset drupal .
          - repository: symfony/symfony
            args: --include-if-php --preset symfony .
          - repository: WordPress/WordPress
            args: --include-if-php --preset wordpress .

    steps:
      - name: Checkout ${{ matrix.repository }}
        uses: actions/checkout@v3
        with:
          repository: ${{ matrix.repository }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: none, json, mbstring, tokenizer
          coverage: none

      - name: Download phar artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.artifact_name }}

      - name: Run pretty-php
        env:
          artifact_path: ${{ needs.build.outputs.artifact_path }}
        run: |
          php "$artifact_path" --print-config ${{ matrix.args }} | tee .prettyphp
          php "$artifact_path" --timers || { status=$? && [[ $status -eq 2 ]] || (exit $status); }
