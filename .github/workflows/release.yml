name: Release

on:
  push:
    tags:
      - "v[0-9]*"

jobs:
  check-ci:
    name: Check CI workflow runs
    runs-on: ubuntu-latest
    outputs:
      ci_required: ${{ steps.get-ci-required.outputs.ci_required }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for a successful run with the same tree
        id: get-ci-required
        run: |
          ci_required=1
          while read -r ref; do
              git diff-tree --quiet "$ref" HEAD || continue
              printf 'CI checks passed: %s\n' "$ref"
              ci_required=0
              break
          done < <(
              git rev-list --no-merges HEAD |
                  grep -Fxf <(gh run list --workflow CI --status success --json headSha --jq '.[].headSha')
          )
          ((!ci_required)) || printf 'CI checks required\n'
          printf 'ci_required=%d\n' "$ci_required" >>"$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  ci:
    name: Run CI workflow
    needs:
      - check-ci
    if: needs.check-ci.outputs.ci_required == 1
    uses: ./.github/workflows/ci.yml

  release:
    name: Build phar and create draft release
    needs:
      - ci
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP and Composer
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          coverage: none

      - name: Get Composer cache directory
        id: get-composer-cache
        run: printf 'cache_dir=%s\n' "$(composer config cache-files-dir)" >>"$GITHUB_OUTPUT"

      - name: Cache PHP dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.get-composer-cache.outputs.cache_dir }}
          key: composer-cache-${{ runner.os }}-${{ hashFiles('**/composer.json', '**/composer.lock') }}
          restore-keys: composer-cache-${{ runner.os }}-

      - name: Install dependencies
        run: composer install --no-interaction --no-progress

      - name: Run build script
        run: |
          scripts/build.sh ${{ github.ref_name }}
          { printf 'artifact_name=%s\n' "${GITHUB_REPOSITORY##*/}" &&
            printf 'artifact_path=%s\n' build/dist/* | head -n1; } >>"$GITHUB_ENV"

      - name: Sign phar
        run: |
          gpg --batch --import <<<"$GPG_KEY"
          gpg --batch --pinentry-mode loopback --passphrase-fd 0 --detach-sign --local-user github@lkr.ms --armor --output ${{ env.artifact_path }}.asc ${{ env.artifact_path }} <<<"$GPG_PASSPHRASE"
        env:
          GPG_KEY: ${{ secrets.GPG_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Create draft release
        run: |
          ${{ env.artifact_path }} --version | grep -F '${{ env.artifact_name }} ${{ github.ref_name }}-'
          gh release create ${{ github.ref_name }} ${{ env.artifact_path }} ${{ env.artifact_path }}.asc --draft --generate-notes --verify-tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
